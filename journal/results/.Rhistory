#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
View(data)
require(plyr)
options(width = 160)
data <- read.csv("out.csv")
data <- subset(data, data$planValid == "true")
avgpp <- ddply(data, .(domain,problem,heuristic,recursionLevel), summarise,
searchTimeM = mean(searchTime),
planLengthM = mean(planLength),
expandedStatesM = mean(expandedStates),
expandedStatesGlobalM = mean(expandedStatesGlobal),
expandedStatesLocalM = mean(expandedStatesLocal),
searchMessagesM = mean(searchMessages),
heuristicRequestMessagesM = mean(heuristicRequestMessages),
heuristicReplyMessagesM = mean(heuristicReplyMessages),
totalMessagesM = mean(totalMessages),
globalSearchTimeM = mean(globalSearchTime),
localSearchTimeM = mean(localSearchTime),
globalHeuristicTimeM = mean(globalHeuristicTime),
localHeuristicTimeM = mean(localHeuristicTime),
otherHeuristicTimeM = mean(otherHeuristicTime)
)
out = format(avgpp , scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "avg-dth-per-problem.csv", quote = FALSE, sep = ",", row.names = FALSE)
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
data$ratioLE <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesM))
data$ratioGE <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesM))
data$ratioGL <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateL <- as.numeric(as.numeric(data$localHeuristicTimeM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateG <- as.numeric(as.numeric(data$globalHeuristicTimeM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateGO <- as.numeric((as.numeric(data$globalHeuristicTimeM)+as.numeric(data$otherHeuristicTimeM)) / as.numeric(data$expandedStatesGlobalM))
data <- subset(data, data$ratioLE != 0)
data <- subset(data, data$ratioGE != 0)
statesPerDomain <- ddply(data, "domain", summarise,meanLE = mean(ratioLE),meanGE = mean(ratioGE),meanGL = mean(ratioGL),meanHeurTimePerStateL = mean(heurTimePerStateL), meanHeurTimePerStateG = mean(heurTimePerStateG), meanHeurTimePerStateGO = mean(heurTimePerStateGO))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain.csv", quote = FALSE, sep = ",", row.names = FALSE)
colors <- palette(c( "red2", "green2",  "blue2","red4", "green4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "green3",  "blue3","red3", "gray75"))
data$plotchar <- as.numeric(data$domain)
data$color <- colors[as.numeric(data$domain)]
pdf("expandedStatesLocalGlobalRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data[,columnx],data[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$domain.x)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$problem)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$label)
legend(1,10000000,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateG,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalOtherRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateGO,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
data$ratioLE <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesM))
data$ratioGE <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesM))
data$ratioGL <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesLocalM))
data$ratioLG <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateL <- as.numeric(as.numeric(data$localHeuristicTimeM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateG <- as.numeric(as.numeric(data$globalHeuristicTimeM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateGO <- as.numeric((as.numeric(data$globalHeuristicTimeM)+as.numeric(data$otherHeuristicTimeM)) / as.numeric(data$expandedStatesGlobalM))
data$heurRatio <- data$heurTimePerStateG / data$heurTimePerStateL
data <- subset(data, data$ratioLE != 0)
data <- subset(data, data$ratioGE != 0)
statesPerDomain <- ddply(data, "domain", summarise,meanLE = mean(ratioLE),meanGE = mean(ratioGE),meanGL = mean(ratioGL),meanLG = mean(ratioLG),meanHeurTimePerStateL = mean(heurTimePerStateL), meanHeurTimePerStateG = mean(heurTimePerStateG), meanHeurTimePerStateGO = mean(heurTimePerStateGO), meanHeurRatio = mean(heurRatio))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain.csv", quote = FALSE, sep = ",", row.names = FALSE)
colors <- palette(c( "red2", "green2",  "blue2","red4", "green4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "green3",  "blue3","red3", "gray75"))
data$plotchar <- as.numeric(data$domain)
data$color <- colors[as.numeric(data$domain)]
pdf("expandedStatesLocalGlobalRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data[,columnx],data[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$domain.x)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$problem)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$label)
legend(1,10000000,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateG,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalOtherRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateGO,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
data$ratioLE <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesM))
data$ratioGE <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesM))
data$ratioGL <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesLocalM))
data$ratioLG <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateL <- as.numeric(as.numeric(data$localHeuristicTimeM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateG <- as.numeric(as.numeric(data$globalHeuristicTimeM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateGO <- as.numeric((as.numeric(data$globalHeuristicTimeM)+as.numeric(data$otherHeuristicTimeM)) / as.numeric(data$expandedStatesGlobalM))
data$heurRatio <- data$heurTimePerStateGO / data$heurTimePerStateL
data <- subset(data, data$ratioLE != 0)
data <- subset(data, data$ratioGE != 0)
statesPerDomain <- ddply(data, "domain", summarise,meanLE = mean(ratioLE),meanGE = mean(ratioGE),meanGL = mean(ratioGL),meanLG = mean(ratioLG),meanHeurTimePerStateL = mean(heurTimePerStateL), meanHeurTimePerStateG = mean(heurTimePerStateG), meanHeurTimePerStateGO = mean(heurTimePerStateGO), meanHeurRatio = mean(heurRatio))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain.csv", quote = FALSE, sep = ",", row.names = FALSE)
colors <- palette(c( "red2", "green2",  "blue2","red4", "green4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "green3",  "blue3","red3", "gray75"))
data$plotchar <- as.numeric(data$domain)
data$color <- colors[as.numeric(data$domain)]
pdf("expandedStatesLocalGlobalRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data[,columnx],data[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$domain.x)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$problem)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$label)
legend(1,10000000,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateG,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalOtherRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateGO,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem-details.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
data$ratioLE <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesM))
data$ratioGE <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesM))
data$ratioGL <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesLocalM))
data$ratioLG <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateL <- as.numeric(as.numeric(data$localHeuristicTimeM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateG <- as.numeric(as.numeric(data$globalHeuristicTimeM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateGO <- as.numeric((as.numeric(data$globalHeuristicTimeM)+as.numeric(data$otherHeuristicTimeM)) / as.numeric(data$expandedStatesGlobalM))
data$heurRatio <- data$heurTimePerStateGO / data$heurTimePerStateL
data <- subset(data, data$ratioLE != 0)
data <- subset(data, data$ratioGE != 0)
statesPerDomain <- ddply(data, "domain", summarise,meanLE = mean(ratioLE),meanGE = mean(ratioGE),meanGL = mean(ratioGL),meanLG = mean(ratioLG),meanHeurTimePerStateL = mean(heurTimePerStateL), meanHeurTimePerStateG = mean(heurTimePerStateG), meanHeurTimePerStateGO = mean(heurTimePerStateGO), meanHeurRatio = mean(heurRatio))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain.csv", quote = FALSE, sep = ",", row.names = FALSE)
colors <- palette(c( "red2", "green2",  "blue2","red4", "green4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "green3",  "blue3","red3", "gray75"))
data$plotchar <- as.numeric(data$domain)
data$color <- colors[as.numeric(data$domain)]
pdf("expandedStatesLocalGlobalRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data[,columnx],data[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$domain.x)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$problem)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$label)
legend(1,10000000,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateG,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalOtherRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateGO,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
setwd("~/workspace/madla-experiments/metacentrum-JOURNAL-REV2/results-compiled")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem-details.csv")
#data <- subset(data, data$planValid == "true")
data <- subset(data, data$heuristic == "PPsaFF-glcl")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
columnx <- "expandedStatesLocalM"
columny <- "expandedStatesGlobalM"
data$ratioLE <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesM))
data$ratioGE <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesM))
data$ratioGL <- as.numeric(as.numeric(data$expandedStatesGlobalM) / as.numeric(data$expandedStatesLocalM))
data$ratioLG <- as.numeric(as.numeric(data$expandedStatesLocalM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateL <- as.numeric(as.numeric(data$localHeuristicTimeM) / as.numeric(data$expandedStatesLocalM))
data$heurTimePerStateG <- as.numeric(as.numeric(data$globalHeuristicTimeM) / as.numeric(data$expandedStatesGlobalM))
data$heurTimePerStateGO <- as.numeric((as.numeric(data$globalHeuristicTimeM)+as.numeric(data$otherHeuristicTimeM)) / as.numeric(data$expandedStatesGlobalM))
data$heurRatio <- data$heurTimePerStateGO / data$heurTimePerStateL
data <- subset(data, data$ratioLE != 0)
data <- subset(data, data$ratioGE != 0)
statesPerDomain <- ddply(data, "domain", summarise,meanLE = mean(ratioLE),meanGE = mean(ratioGE),meanGL = mean(ratioGL),meanLG = mean(ratioLG),meanHeurTimePerStateL = mean(heurTimePerStateL), meanHeurTimePerStateG = mean(heurTimePerStateG), meanHeurTimePerStateGO = mean(heurTimePerStateGO), meanHeurRatio = mean(heurRatio))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain.csv", quote = FALSE, sep = ",", row.names = FALSE)
colors <- palette(c( "red2", "green2",  "blue2","red4", "green4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "green3",  "blue3","red3", "gray75"))
data$plotchar <- as.numeric(data$domain)
data$color <- colors[as.numeric(data$domain)]
pdf("expandedStatesLocalGlobalRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data[,columnx],data[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$domain.x)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$problem)
#text(exp(log(data_h1_h2[,columnx])+offsetx),exp(log(data_h1_h2[,columny])+offsety),labels=data_h1_h2$label)
legend(1,10000000,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateG,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
pdf("heuristicTimeLocalGlobalOtherRatio.pdf")
#data <- subset(data,data$domainShort == "rovers")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(data$heurTimePerStateL,data$heurTimePerStateGO,xlim=c(0.001,20), ylim=c(0.001,250),log="x",xlab="projected FF",ylab="distributed FF",col=data$color,pch=data$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
#text(data$heurTimePerStateL,exp(log(data$heurTimePerStateG)),labels=data$problemShort)
legend(0.001,250,unique(data$domainShort),cex=0.8,col=unique(data$color),pch=unique(data$plotchar))
dev.off()
out = format(data, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "out_avg_extended.csv", quote = FALSE, sep = ",", row.names = FALSE)
openstacks <- subset(data, domainShort == "openstacks")
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$domainShort <- gsub("/domain.pddl","",data$domainShort)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "sokoban")
data <- subset(data, data$domainShort != "transport")
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
#data <- subset(data, data$domainShort != "satellites")
#data <- subset(data, data$domainShort != "rovers")
#data <- subset(data, data$domainShort != "logistics00")
#data <- subset(data, data$domainShort != "zenotravel")
#data <- subset(data, data$domainShort != "openstacks")
dataProj <- subset(data, data$heuristic == "FF" & data$recursionLevel == 0)
dataDist <- subset(data, data$heuristic == "PPsaFF-sync")
dataMerge <- merge(dataDist,dataProj,by="problemShort")
View(dataMerge)
dataMerge$ratioExpanded <- as.numeric(as.numeric(dataMerge$expandedStatesM.y) / as.numeric(dataMerge$expandedStatesM.x))
statesPerDomain <- ddply(dataMerge, "domain", summarise,meanExpanded = mean(ratioExpanded))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain_dist_vs_proj.csv", quote = FALSE, sep = ",", row.names = FALSE)
dataMerge$ratioExpanded <- as.numeric(as.numeric(dataMerge$expandedStatesM.y) / as.numeric(dataMerge$expandedStatesM.x))
View(dataMerge)
statesPerDomain <- ddply(dataMerge, "domain", summarise,meanExpanded = mean(ratioExpanded))
View(dataMerge)
statesPerDomain <- ddply(dataMerge, "problemShort", summarise,meanExpanded = mean(ratioExpanded))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain_dist_vs_proj.csv", quote = FALSE, sep = ",", row.names = FALSE)
statesPerDomain <- ddply(dataMerge, "domainShort", summarise,meanExpanded = mean(ratioExpanded))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain_dist_vs_proj.csv", quote = FALSE, sep = ",", row.names = FALSE)
statesPerDomain <- ddply(dataMerge, "domainShort", summarise,meanExpanded = mean(ratioExpanded))
View(dataMerge)
statesPerDomain <- ddply(dataMerge, "domain.x", summarise,meanExpanded = mean(ratioExpanded))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain_dist_vs_proj.csv", quote = FALSE, sep = ",", row.names = FALSE)
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$domainShort <- gsub("/domain.pddl","",data$domainShort)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "sokoban")
data <- subset(data, data$domainShort != "transport")
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
#data <- subset(data, data$domainShort != "satellites")
#data <- subset(data, data$domainShort != "rovers")
#data <- subset(data, data$domainShort != "logistics00")
#data <- subset(data, data$domainShort != "zenotravel")
#data <- subset(data, data$domainShort != "openstacks")
dataProj <- subset(data, data$heuristic == "FF" & data$recursionLevel == 0)
dataDist <- subset(data, data$heuristic == "PPsaFF-sync")
dataMerge <- merge(dataDist,dataProj,by="problemShort")
View(dataMerge)
dataMerge$ratioExpanded <- dataMerge$expandedStatesM.y / dataMerge$expandedStatesM.x
View(dataMerge)
statesPerDomain <- ddply(dataMerge, "domain.x", summarise,meanExpanded = mean(ratioExpanded))
out = format(statesPerDomain, scientific = FALSE, digits = 2, nsmall = 1)
write.table(out, "expanded_states_per_domain_dist_vs_proj.csv", quote = FALSE, sep = ",", row.names = FALSE)
columnx <- "expandedStatesM.y"
columny <- "expandedStatesM.x"
colors <- palette(c( "red2", "green2",  "blue2","red4", "lightsalmon4", "lightblue", "black", "gray50", "lightsalmon4", "darkgoldenrod1", "lightblue", "lightsalmon4", "lightsalmon4",  "blue3","red3", "gray75"))
dataMerge$plotchar <- as.numeric(dataMerge$domain.x)
dataMerge$color <- colors[as.numeric(dataMerge$domain.x)]
pdf("expandedStatesProjDistRatio.pdf")
getOption("scipen")
opt <- options("scipen" = 10)
getOption("scipen")
plot(dataMerge[,columnx],dataMerge[,columny],xlim=c(1,10000000), ylim=c(1,10000000),xlab="projected FF",ylab="distributed FF",log="xy",col=dataMerge$color,pch=dataMerge$plotchar) #plotchar[data_h1_h2$domain.x]
abline(0,1)
legend(1,10000000,unique(dataMerge$domainShort.x),cex=0.8,col=unique(dataMerge$color),pch=unique(dataMerge$plotchar))
dev.off()
require(plyr)
#library(RColorBrewer)
options(width = 160, height = 160)
data <- read.csv("avg-dth-per-problem.csv")
data$domainShort <- gsub("benchmarks/","",data$domain)
data$domainShort <- gsub("/domain.pddl","",data$domainShort)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "sokoban")
data <- subset(data, data$domainShort != "transport")
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
View(data)
data1 <- subset(data, data$totalTimeM <= 1*60*1000)
View(data1)
data5 <- subset(data, data$totalTimeM <= 5*60*1000)
data10 <- subset(data, data$totalTimeM <= 10*60*1000)
data10 <- subset(data, data$totalTimeM <= 15*60*1000)
data10 <- subset(data, data$totalTimeM <= 10*60*1000)
data15 <- subset(data, data$totalTimeM <= 15*60*1000)
data05 <- subset(data, data$totalTimeM <= 0.5*60*1000)
data1s <- subset(data, data$totalTimeM <= 1000)
data05 <- subset(data, data$totalTimeM <= 0.5*60*1000)
data1 <- subset(data, data$totalTimeM <= 1*60*1000)
data5 <- subset(data, data$totalTimeM <= 5*60*1000)
data10 <- subset(data, data$totalTimeM <= 10*60*1000)
data15 <- subset(data, data$totalTimeM <= 15*60*1000)
dataTD$time1s <- ddply(data1s, "domain", summarise,cvg = length(agents))
View(data1s)
dataTD$time1s <- ddply(data1s, "domain", summarise,cvg = length(heuristic))
dataTD <- ddply(data1s, "domain", summarise,cvg = length(heuristic))
View(dataTD)
dataTD <- ddply(data1s, "heuristic", summarise,cvg = length(heuristic))
View(dataTD)
dataTD$05 <- ddply(data05, "heuristic", summarise,cvg = length(heuristic))
dataTD <- merge(data1s, ddply(data05, "heuristic", summarise,cvg = length(heuristic)),by="heuristic")
View(dataTD)
dataTD <- ddply(data1s, "heuristic", summarise,cvg = length(heuristic))
dataTD <- merge(dataTD, ddply(data05, "heuristic", summarise,cvg = length(heuristic)),by="heuristic")
View(dataTD)
dataTD <- ddply(data1s, "heuristic", summarise,cvg1s = length(heuristic))
dataTD <- merge(dataTD, ddply(data05, "heuristic", summarise,cvg30s = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data1, "heuristic", summarise,cvg31m = length(heuristic)),by="heuristic")
View(dataTD)
dataTD <- ddply(data1s, "heuristic", summarise,cvg1s = length(heuristic))
dataTD <- merge(dataTD, ddply(data05, "heuristic", summarise,cvg30s = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data1, "heuristic", summarise,cvg1m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data5, "heuristic", summarise,cvg5m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data10, "heuristic", summarise,cvg10m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data15, "heuristic", summarise,cvg15m = length(heuristic)),by="heuristic")
View(dataTD)
View(data)
data <- read.csv("avg-dth-per-problem.csv")
data <- subset(data, data$totalTimeM != -1)
data$domainShort <- gsub("benchmarks/","",data$domain)
data$domainShort <- gsub("/domain.pddl","",data$domainShort)
data$problemShort <- gsub("benchmarks/","",data$problem)
data <- subset(data, data$domainShort != "sokoban")
data <- subset(data, data$domainShort != "transport")
data <- subset(data, data$domainShort != "mablocks")
data <- subset(data, data$domainShort != "rovers-large")
data <- subset(data, data$domainShort != "satellites-hc")
data1s <- subset(data, data$totalTimeM <= 1000)
data05 <- subset(data, data$totalTimeM <= 0.5*60*1000)
data1 <- subset(data, data$totalTimeM <= 1*60*1000)
data5 <- subset(data, data$totalTimeM <= 5*60*1000)
data10 <- subset(data, data$totalTimeM <= 10*60*1000)
data15 <- subset(data, data$totalTimeM <= 15*60*1000)
dataTD <- ddply(data1s, "heuristic", summarise,cvg1s = length(heuristic))
dataTD <- merge(dataTD, ddply(data05, "heuristic", summarise,cvg30s = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data1, "heuristic", summarise,cvg1m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data5, "heuristic", summarise,cvg5m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data10, "heuristic", summarise,cvg10m = length(heuristic)),by="heuristic")
dataTD <- merge(dataTD, ddply(data15, "heuristic", summarise,cvg15m = length(heuristic)),by="heuristic")
View(dataTD)
cvg <- ddply(data, "heuristic", summarise,cvg = length(heuristic))
View(cvg)
